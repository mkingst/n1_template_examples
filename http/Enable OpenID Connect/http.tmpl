{{$input := .}}
{{$augmentData := .AugmentData.V1}}

{{$oidcEnabled := $augmentData.main.templateInput.oidc.enabled}}

{{if eq $oidcEnabled true}}
http {
    map $host $oidc_pkce_enable {
        default 0;
    }

    map $host $zone_sync_leeway {
        # Specifies the maximum timeout for synchronizing ID tokens between cluster
        # nodes when you use shared memory zone content sync. This option is only
        # recommended for scenarios where cluster nodes can randomly process
        # requests from user agents and there may be a situation where node "A"
        # successfully received a token, and node "B" receives the next request in
        # less than zone_sync_interval.
        default 0; # Time in milliseconds, e.g. (zone_sync_interval * 2 * 1000)
    }

    map $proto $oidc_cookie_flags {
        http  "Path=/; SameSite=lax;"; # For HTTP/plaintext testing
        https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
    }

    map $http_x_forwarded_port $redirect_base {
        ""      $proto://$host:$server_port;
        default $proto://$host:$http_x_forwarded_port;
    }

    map $http_x_forwarded_proto $proto {
        ""      $scheme;
        default $http_x_forwarded_proto;
    }

    # ADVANCED CONFIGURATION BELOW THIS LINE

    # JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
    proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;
    # OIDC wellknown metadata will be fetched from $oidc_wellknown_endpoint and cached here - ensure writable by nginx user
    proxy_cache_path /var/cache/nginx/wellknown levels=1 keys_zone=wellknown:64k max_size=1m;

    # Change timeout values to at least the validity period of each token type
    keyval_zone zone=oidc_id_tokens:10M     state=conf.d/oidc_id_tokens.json     timeout=1h;
    keyval_zone zone=oidc_access_tokens:10M state=conf.d/oidc_access_tokens.json timeout=1h;
    keyval_zone zone=refresh_tokens:10M     state=conf.d/refresh_tokens.json     timeout=8h;
    keyval_zone zone=oidc_pkce:128K timeout=90s; # Temporary storage for PKCE code verifier.

    keyval $cookie_auth_token $session_jwt   zone=oidc_id_tokens;     # Exchange cookie for JWT
    keyval $cookie_auth_token $access_token  zone=oidc_access_tokens; # Exchange cookie for access token
    keyval $cookie_auth_token $refresh_token zone=refresh_tokens;     # Exchange cookie for refresh token
    keyval $request_id $new_session          zone=oidc_id_tokens;     # For initial session creation
    keyval $request_id $new_access_token     zone=oidc_access_tokens;
    keyval $request_id $new_refresh          zone=refresh_tokens; # ''
    keyval $pkce_id $pkce_code_verifier      zone=oidc_pkce;

    keyval_zone zone=oidc_authz_url:5M     state=conf.d/oidc_authz_url.json     timeout=24h;
    keyval_zone zone=oidc_token_url:5M state=conf.d/oidc_token_url.json timeout=24h;
    keyval_zone zone=oidc_jwks_url:5M     state=conf.d/oidc_jwks_url.json     timeout=24h;

    map $host $oidc_wellknown_endpoint {
    	default "";
    }

    keyval $oidc_wellknown_endpoint $oidc_authz_endpoint   zone=oidc_authz_url;
    keyval $oidc_wellknown_endpoint $oidc_token_endpoint  zone=oidc_token_url;
    keyval $oidc_wellknown_endpoint $oidc_jwt_keyfile zone=oidc_jwks_url;

    auth_jwt_claim_set $jwt_audience aud; # In case aud is an array
    js_import oidc from conf.d/openid_connect.js;
}
{{end}}
